{
  "assistant": {
    "default_model": {
      "provider": "anthropic",
      "model": "claude-3-5-sonnet-latest"
    },
    "version": "2"
  },
  "base_keymap": "VSCode",
  "ui_font_size": 16,
  "buffer_font_size": 16,
  "theme": {
    "mode": "system",
    "light": "One Light",
    "dark": "Catppuccin Mocha (Blur)"
  },
  "vim_mode": true,
  "ui_font_family": "BlexMono Nerd Font Mono",
  "buffer_font_family": "GeistMono Nerd Font Mono",
  "buffer_font_weight": 300,
  "relative_line_numbers": true,
  "cursor_blink": false,
  "experimental.theme_overrides": {
      "renamed.background": "#FFFFFF20",
      "search.match_background": "#FFFFFF20",
      "ghost_element.background": "#00000010",
      "ghost_element.hover": "#00000099",
      "background.appearance": "blurred",
      "background": "#1a1b26CC",
      "editor.background": "#00000010",
      "editor.gutter.background": "#00000010",
      "title_bar.background": "#000000DF",
      "toolbar.background": "#00000010",
      "terminal.background": "#00000000",
      "status_bar.background": "#000000DF",
      "tab.active_background": "#000000",
      "tab.inactive_background": "#00000000",
      "tab_bar.background": "#00000010",
      "border": "#00000000",
      "border.variant": "#00000000",
      "scrollbar.track.border": "#00000000",
      "scrollbar.track.background": "#00000000",
      "scrollbar.thumb.background": "#00000000",
      "scrollbar.thumb.hover.background": "#00000000",
      "scrollbar.thumb.active.background": "#00000000",
      "scrollbar.thumb.border": "#FFFFFF90",
      "editor.line_highlight": "#00000000",
      "editor.active_line.background": "#00000000",
      "editor.selection.background": "#00000000",
      "editor.selection.foreground": "#00000000",
      "editor.selection.border": "#00000000",
      "editor.selection.inactive.foreground": "#00000000",
      "editor.selection.inactive.border": "#00000000",
      "editor.selection.active.background": "#00000000",
      "editor.selection.active.foreground": "#00000000",
      "editor.selection.active.border": "#00000000",
      "editor.selection.inactive.background": "#00000000"
    },
  "buffer_line_height": {
    "custom": 1.5
  },
  "inlay_hints": {
    "enabled": true
  },
  "vertical_scroll_margin": 0,
  "tab_bar": {
    "show": false
  },
  "lsp": {
    "tailwindcss-language-server": {
      "settings": {
        "classAttributes": [
          "class",
          "className",
          "ngClass",
          "styles"
        ]
      }
    }
  },
  "tab_size": 2,
  "outline_panel": {
    "button": false
  },
  "languages": {
    // Refer https://zed.dev/docs/languages/javascript and https://zed.dev/docs/languages/typescript for more info
    "TypeScript": {
      // Refer https://github.com/jellydn/ts-inlay-hints for how to setup for Neovim and VSCode
      "inlay_hints": {
        "enabled": true,
        "show_parameter_hints": false,
        "show_other_hints": true,
        "show_type_hints": true
      },
      "tab_size": 2,
      "formatter": {
        "external": {
          "command": "prettier",
          "arguments": [
            "--stdin-filepath",
            "{buffer_path}"
          ]
        }
      }
    }
  },
  "telemetry": {
    "diagnostics": false,
    "metrics": false
  },
  "indent_guides": {
    "enabled": true,
    "coloring": "indent_aware"
  },
  "hard_tabs": false,
  "formatter": "language_server",
  "format_on_save": "off",
  "project_panel": {
    "indent_size": 20,
    "auto_fold_dirs": true,
    "button": true,
    "dock": "left",
    "git_status": true
  },
  "centered_layout": {
    "left_padding": 0.15,
    "right_padding": 0.15
  },
  "soft_wrap": "editor_width",
  "inline_completions": {
    "disabled_globs": [
      ".env",
      "test.go",
      ".md",
      "diagram.dsl"
    ]
  },
  "scrollbar": {
    "git_diff": false,
    "search_results": false,
    "selected_symbol": false,
    "diagnostics": false
  },
  "preview_tabs": {
    "enabled": false,
    "enable_preview_from__file_finder": false,
    "enable_preview_from_code_navigation": false
  },
  "toolbar": {
    // Whether to show breadcrumbs.
    "breadcrumbs": false,
    // Whether to show quick action buttons.
    "quick_actions": false,
    // Whether to show the Selections menu in the editor toolbar
    "selections_menu": false
  },
  "chat_panel": {
    // Whether to show the chat panel button in the status bar.
    "button": false
  },
  "notification_panel": {
    // Whether to show the notification panel button in the status bar.
    "button": false
  },
  "task": {
    // Whether to show task status indicator in the status bar. Default: true
    "show_status_indicator": false
  },
  "terminal": {
    "shell": {
      "program": "zsh"
    },
    "dock": "bottom",
    // Default width when the terminal is docked to the left or right.
    "default_width": 640,
    // Default height when the terminal is docked to the bottom.
    "default_height": 320,
    "working_directory": "current_project_directory",
    "blinking": "terminal_controlled",
    // Default cursor shape for the terminal.
    //  1. A block that surrounds the following character
    //     "block"
    //  2. A vertical bar
    //     "bar"
    //  3. An underline / underscore that runs along the following character
    //     "underline"
    //  4. A box drawn around the following character
    //     "hollow"
    //
    // Default: not set, defaults to "block"
    "cursor_shape": null,
    // Set whether Alternate Scroll mode (code: ?1007) is active by default.
    // Alternate Scroll mode converts mouse scroll events into up / down key
    // presses when in the alternate screen (e.g. when running applications
    // like vim or  less). The terminal can still set and unset this mode.
    // May take 2 values:
    //  1. Default alternate scroll mode to on
    //         "alternate_scroll": "on",
    //  2. Default alternate scroll mode to off
    //         "alternate_scroll": "off",
    "alternate_scroll": "off",
    // Set whether the option key behaves as the meta key.
    // May take 2 values:
    //  1. Rely on default platform handling of option key, on macOS
    //     this means generating certain unicode characters
    //         "option_as_meta": false,
    //  2. Make the option keys behave as a 'meta' key, e.g. for emacs
    //         "option_as_meta": true,
    "option_as_meta": false,
    // Whether or not selecting text in the terminal will automatically
    // copy to the system clipboard.
    "copy_on_select": true,
    // Whether to show the terminal button in the status bar
    "button": true,
    "line_height": "comfortable",
    "toolbar": {
      // Whether to display the terminal title in its toolbar.
      "title": false
    },
    "font_family": "MesloLGM Nerd Font Mono",
    "font_weight": 300
  }
}
